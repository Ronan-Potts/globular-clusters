---
title: "Galaxy Clusters"
format:
  html:
    ### IMPORTANT ###
    self-contained: true # Creates a single HTML file as output
    code-fold: show # Code folding; allows you to show/hide code chunks
    ### USEFUL ###
    code-tools: true # Includes a menu to show/hide all chunks
    ### OPTIONAL ###
    code-line-numbers: true # Line numbers in code chunks
    df-print: paged # Sets how dataframes are automatically printed
    echo: false
table-of-contents: true # (Useful) Creates a table of contents!
number-sections: true # (Optional) Puts numbers next to heading/subheadings
jupyter: python3
---

# Introduction

## Overview

We will be studying **Globular Clusters** using data from **Gaia**. A key website that lists a huge amount of information for all the Milky Way globular clusters can be found [here](https://people.smp.uq.edu.au/HolgerBaumgardt/globular/).

## Project Aim

> To investigate the relationship between the kinematics and visual attributes of Milky Way's globular clusters.



# Investigating the Data

## Catalogues

This folder contains results of astrometric classification of stars in 170 globular clusters, using Gaia EDR3.

```{python}
#| echo: false

import pandas as pd
from IPython.display import display, Markdown

# Accessing the file
filePath = "../clusters/catalogues/"
fileName = "Pal_5.txt"

# Reading file with pandas
f_data = pd.read_csv(filePath+fileName, sep="\t", header=0).rename(
    columns=lambda x: x.strip()
)

# ===============================================================================
# ------------------------------DISPLAYED RESULTS--------------------------------
# ===============================================================================

# Display the pandas dataframe with IPython.display
display(f_data)

# Write text outside of cell
display(Markdown("""
  Here we glance at data from {}. The variables can be defined as follows:

  * **# source_id:** Gaia source ID

  * **ra:** celestial coordinate - right ascension \[degrees\];

  * **dec:** celestial coordinate - declination \[degrees\];

  * **x:** x-coordinate centered on the cluster \[degrees\];

  * **y:** y-coordinate centered on the cluster \[degrees\];

  * **plx:** parallax corrected for zero-point offset using the Lindegren et al. prescription \[milli-arcseconds\];

  * **pmra:** proper motion in right ascension \[milli-arcseconds/year\];

  * **pmdec:** proper motion in declination \[milli-arcseconds/year\];

  * **plxe:** parallax uncertainty \[milli-arcseconds\];

  * **pmrae:** proper motion uncertainty in right ascension \[milli-arcseconds/year\];

  * **pmdece:** proper motion uncertainty in declination \[milli-arcseconds/year\];

  * **pmcorr:** correlation coefficient between the two proper motion uncertainties;

  * **g_map:** G-band magnitude;

  * **bp_rp:** BP-RP;

  * **Sigma:** source density, used to determine parallax/proper motion uncertainty scaling factors \[stars/arcmin^2\];

  * **qflag:** quality flag \[bitfield - 4 possible combinations of two independent flags:

    * lowest bit (0/1) denotes 6-parameter (0) or 5-parameter (1) solutions;

    * next bit (0/2) distinguises stars that passed all quality filters (2) from those that didn't (0)\];

  * **memberprob:** membership probability.
  """.format(fileName)
))
```

## Profiles

This folder contains radial profiles of the rotational proper motion component and the proper motion dispersion for some clusters. The columns are:

* **# source_id:** distance from cluster centre \[degrees\];

* **ra:** percentiles for the proper motion dispersion \[milli-arcseconds/year\] (2.3, 15.9, 50, 84.1, 97.7 percentiles);

* **dec:** percentiles for the proper motion rotation \[milli-arcseconds/year\] (2.3, 15.9, 50, 84.1, 97.7 percentiles).

# Preliminary Data Exploration - Week 2

## Plotting declination and right ascension spread


```{python}
#| echo: false
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Accessing the file
filePath = "../clusters/catalogues/"
fileName = "Pal_5.txt"

# Reading file with pandas
f_data = pd.read_csv(filePath+fileName, sep="\t", header=0).rename(
    columns=lambda x: x.strip()
)

ra_deg = f_data["ra"]
dec_deg = f_data["dec"]
member_prob = f_data["memberprob"]


from IPython.display import display,Markdown
display(Markdown("""
Below I plot the deviation of the right ascension and declination from their respective means for the {} dataset. A colormap has also been added showing the membership probability of each star.
""".format(fileName)))

# cmap="Wistia" shows all points with none being hidden, while also allowing the reader to filter out any stars with a low membership profile.
plt.scatter(ra_deg-np.mean(ra_deg), dec_deg-np.mean(dec_deg), c=member_prob, cmap='Wistia')
plt.colorbar()
plt.title("Figure 1: a visualisation of the {} cluster spread in the celestial sphere.".format(fileName))
plt.xlabel("Right Ascension Deviation (degrees)")
plt.ylabel("Declination Deviation (degrees)")
plt.show()
```

